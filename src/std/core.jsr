// -----------------------------------------------------------------------------
// BUILTIN OBJECTS
// -----------------------------------------------------------------------------

var importPaths, argv = [], []

// -----------------------------------------------------------------------------
// BUILTIN CLASSES
// -----------------------------------------------------------------------------

class Number
    native new(n)
    native isInt()
    native __string__()
    native __hash__()
end

class Boolean
    native new(b)
    native __string__()
    native __hash__()
end

class Null
    native __string__()
end

class Function
    native __string__()
end

class Module
    native __string__()
end

class StackTrace end
class Userdata end

class Iterable
    fun forEach(func)
        for var e in this do
            func(e)
        end
    end

    fun sum()
        var res = 0
        for var e in this do
            res += e
        end
        return res
    end

    fun reduce(fn)
        var iter = this.__iter__(null)
        if !iter then 
            return null 
        end

        var accu = this.__next__(iter) 
        while iter = this.__iter__(iter) do
            accu = fn(accu, this.__next__(iter))
        end

        return accu
    end

    fun any(predicate)
        for var e in this do
            if predicate(e) then
                return true
            end
        end
        return false
    end

    fun all(predicate)
        for var e in this do
            if !predicate(e) then
                return false
            end
        end
        return true
    end

    fun enumerate(start=0) 
        return IEnumerate(this, start)
    end

    fun map(fn)
        return IMap(fn, this)
    end

    fun filter(fn) 
        return IFilter(fn, this)
    end

    fun zip(iterable)
        return IZip(this, iterable)
    end

    fun sorted()
        var lst = List(this)
        lst.sort()
        return lst
    end

    fun toList()
        return List(this)
    end

    fun toTuple()
        return Tuple(this)
    end

    fun toTable()
        return Table(this)
    end
end

class Sequence is Iterable
    fun contains(e)
        return this.indexOf(e) != -1
    end

    fun indexOf(e)
        var length = #this
        for var i = 0; i < length; i += 1 do
            if this[i] == e then
                return i
            end
        end
        return -1
    end

    fun indexOfLast(e)
        for var i = #this - 1; i >= 0; i -= 1 do
            if this[i] == e then
                return i
            end
        end
        return -1
    end

    fun count(e)
        var count = 0
        for var o in this do
            if o == e then 
                count += 1
            end
        end
        return count
    end

    fun empty()
        return #this == 0
    end

    fun reverse()
        return IReverse(this)
    end

    fun __eq__(other)
        if type(other) != type(this) then
            return false 
        end

        var length = #this
        if length != #other then
            return false
        end

        for var i = 0; i < length; i += 1 do
            if this[i] != other[i] then
                return false
            end
        end
        return true
    end
end

class String is Sequence
    native new(...)
    native charAt(idx)
    native startsWith(prefix, offset=0)
    native endsWith(suffix)
    native strip()
    native chomp()
    native join(iterable)
    native escaped()
    native __mod__(args)
    native __eq__(o)
    native __len__()
    native __iter__(iter)
    native __next__(idx)
    native __string__()
    native __hash__()
end

class List is Sequence
    native new(n=0, init=null)
    native add(e)
    native insert(i, e)
    native removeAt(i)
    native clear()
    native sort(comparator=null)
    native __len__()
    native __eq__(other)
    native __iter__(iter)
    native __next__(idx)

    fun addAll(iterable)
        var changed = false
        for var e in iterable do
            this.add(e)
            changed = true
        end
        return changed
    end

    fun insertAll(iterable, i=0)
        var changed = false
        for var e in iterable do
            this.insert(i, e)
            changed = true
        end
        return changed
    end

    fun remove(e)
        var length = #this
        for var i = 0; i < length; i += 1 do
            if e == this[i] then
                this.removeAt(i)
                return true
            end
        end
        return false
    end

    fun removeAll(iterable)
        var changed = false
        for var e in iterable do
            var r = this.remove(e)
            changed = changed or r
        end
        return changed
    end

    fun pop()
        return this.removeAt(#this - 1)
    end

    fun __string__()
        return "[" + ", ".join(this) + "]"
    end
end

class Tuple is Sequence
    native new(iterable=null)
    native __len__()
    native __eq__(other)
    native __iter__(iter)
    native __next__(idx)
    native __hash__()

    fun __string__()
        return "(" + ", ".join(this) + ")"
    end
end

class Table is Iterable
    native new(iterable=null)
    native delete(key)
    native clear()
    native contains(key)
    native keys()
    native values()
    native __get__(key)
    native __set__(key, val)
    native __len__()
    native __iter__(i)
    native __next__(i)
    native __string__()
end

class Enum
    native new(...)
    native value(name)
    native name(value)
end

// -----------------------------------------------------------------------------
// BUILTIN FUNCTIONS
// -----------------------------------------------------------------------------

fun assert(cond, msg="assertion failed", exception=null)
    if !cond then 
        raise (exception(msg) if exception else AssertException(msg))
    end
end

fun typeAssert(arg, cls, name)
    if !(arg is cls) then
        var got, expected = cls.getName(), type(arg).getName()
        raise TypeException("{0} must be a {1}, got {2}" % (name, got, expected))
    end
end

fun partial(fn, arg)
    return |...| => fn(arg, args)...
end

native ascii(num)
native char(c)
native eval(source)
native garbageCollect()
native int(n)
native print(s, ...)
native type(o)

// -----------------------------------------------------------------------------
// BUILTIN ITERATORS
// -----------------------------------------------------------------------------

class IReverse is Sequence
    fun new(sequence)
        this._sequence = sequence
        this._size = #sequence
    end

    fun __get__(i)
        try
            return this._sequence[this._size - i - 1]
        except IndexOutOfBoundException e
            raise IndexOutOfBoundException(##i)
        end
    end

    fun __len__()
        return this._size
    end

    fun __iter__(i)
        if i == null then
            return 0 if this._size > 0 else false
        end
        return i + 1 if i < this._size - 1 else false
    end

    fun __next__(i)
        return this._sequence[this._size - i - 1]
    end
end

class IEnumerate is Iterable
    fun new(iter, start=0)
        this._iter = iter
        this._idx = start
    end

    fun __iter__(i)
        return this._iter.__iter__(i)
    end

    fun __next__(i)
        var ret = (this._idx, this._iter.__next__(i))
        this._idx += 1
        return ret
    end
end

class IFilter is Iterable
    fun new(predicate, iterable)
        this._predicate = predicate
        this._iterable = iterable
    end

    fun __iter__(iter)
        while iter = this._iterable.__iter__(iter) do
            if this._predicate(this._iterable.__next__(iter)) then
                return iter
            end
        end
        return false
    end

    fun __next__(i)
        return this._iterable.__next__(i)
    end
end

class IMap is Iterable
    fun new(fn, iterable)
        this._fn = fn
        this._iterable = iterable
    end

    fun __iter__(i)
        return this._iterable.__iter__(i)
    end

    fun __next__(i)
        return this._fn(this._iterable.__next__(i))
    end
end

class IZip is Iterable
    fun new(iterable1, iterable2)
        this._iterable1 = iterable1
        this._iterable2 = iterable2
    end

    fun __iter__(iters)
        var iter1, iter2
        if iters != null then
            iter1, iter2 = iters
        end

        var res1 = this._iterable1.__iter__(iter1)
        if !res1 then
            return false
        end

        var res2 = this._iterable2.__iter__(iter2)
        if !res2 then
            return false
        end

        return res1, res2
    end

    fun __next__(iters)
        var iter1, iter2 = iters
        return this._iterable1.__next__(iter1), this._iterable2.__next__(iter2)
    end
end

// -----------------------------------------------------------------------------
// BUILTIN EXCEPTIONS
// -----------------------------------------------------------------------------

class Exception
    fun new(err="", cause=null)
        this._err = err
        this._cause = cause
        this._stacktrace = null
    end

    fun err()
        return this._err
    end

    fun cause()
        return this._cause
    end

    native printStacktrace()
    native getStacktrace()
end

class TypeException is Exception end
class NameException is Exception end
class FieldException is Exception end
class MethodException is Exception end
class ImportException is Exception end
class StackOverflowException is Exception end
class SyntaxException is Exception end
class InvalidArgException is Exception end
class IndexOutOfBoundException is Exception end
class AssertException is Exception end
class NotImplementedException is Exception end
class ProgramInterrupt is Exception end