class RegexException is Exception end

native match(str, regex, off=0)
native find(str, regex, off=0)
native gsub(str, regex, sub, num=0)
native gmatch(str, regex)

static fun isZeroMatch(startMatch, endMatch, lastMatch)
    return lastMatch == endMatch and endMatch - startMatch == 0
end

static class IGmatch is Iterable
    fun new(str, regex)
        this.off = 0
        this.lastMatch = null
        this.str = str
        this.regex = regex
    end

    fun __iter__(_)
        var res = find(this.str, this.regex, this.off)
        if !res then 
            return null
        end
        
        var startMatch, endMatch = res

        while isZeroMatch(startMatch, endMatch, this.lastMatch) do
            res = find(this.str, this.regex, this.off += 1)
            if !res then 
                return null
            end
            
            startMatch, endMatch = res
        end

        this.off = this.lastMatch = endMatch
        
        if #res == 2 then
            return this.str[startMatch, endMatch]
        elif #res == 3 then
            return res[2]
        else
            return res[2, #res]
        end
    end

    fun __next__(match)
        return match
    end
end

fun igmatch(str, regex)
    return IGmatch(str, regex)
end
