class Number {
	def new() { error("Class Number cannot be instantiated."); }
	native __string__();
	native __class__();
	native __hash__();
}
class Boolean {
	def new() { error("Class Boolean cannot be instantiated."); }
	native __string__();
	native __class__();
}
class Null {
	def new() { error("Class Null cannot be instantiated."); }
	native __string__();
	native __class__();
}
class Function {
	def new() { error("Class Function cannot be instantiated."); }
	native __string__();
}
class Module   {
	def new() { error("Class Module cannot be instantiated."); }
	native __string__();
}

class String {
	def new() { error("Class String cannot be instantiated."); }
	native length();

	def __string__() {
		return this;
	}

	native __hash__();
}

class List {
	def new() { error("Class List cannot be instantiated."); }

	native add(e);
	native insert(i, e);
	native remove(i);
	native length();
	native clear();

	def addAll(iterable) {
		for(var e in iterable) {
			this.add(e);
		}
	}

	def delete(e) {
		var i = this.indexOf(e);
		if(i >= 0) {
			this.remove(i);
			return true;
		}
		return false;
	}

	def deleteAll(e) {
		var ret = false;
		for(var i = 0; i < this.length(); i = i + 1) {
			if(this[i].__equals__(e)) {
				this.remove(i);
				ret = true;
			}
		}
		return ret;
	}

	def contains(e) {
		return this.indexOf(e) != -1;
	}

	def indexOf(e) {
		for(var i = 0; i < this.length(); i = i + 1) {
			if(this[i].__equals__(e)) {
				return i;
			}
		}
		return -1;
	}

	def indexOfLast(e) {
		for(var i = this.length() - 1; i >= 0; i = i - 1) {
			if(this[i].__equals__(e)) return i;
		}
		return -1;
	}

	def join(sep) {
		var s = "";
		for(var i = 0; i < this.length(); i = i + 1) {
			s = s + this[i].__string__();
			if(i != this.length() - 1) s = s + sep;
		}
		return s;
	}

	def __iterator__() {
		return __ListIterator(this);
	}

	def __string__() {
		return "[" + this.join(", ") + "]";
	}
}

class __ListIterator {
	def new(list) {
		this.n = 0;
		this.list = list;
	}

	def hasNext() {
		return this.n < this.list.length();
	}

	def next() {
		var next = this.list[this.n];
		this.n = this.n + 1;
		return next;
	}
}

def print(o) {
	__printstr(o.__string__());
}

def str(e) {
	return e.__string__();
}

native list(n, init);
native error(msg);
native isInt(n);
native __printstr(str);
