class Number
	fun new()
		__noinstance(this)
	end
	native __string__()
	native __class__()
	native __hash__()
end
class Boolean
	fun new()
		__noinstance(this)
	end
	native __string__()
	native __class__()
end
class Null
	fun new()
		__noinstance(this)
	end
	native __string__()
	native __class__()
end
class Function
	fun new()
		__noinstance(this)
	end
	native __string__()
end
class Module
	fun new()
		__noinstance(this)
	end
	native __string__()
end
class StackTrace
	fun new()
		__noinstance(this)
	end
end

class String
	fun new()
		__noinstance(this)
	end

	native __eq__(o)
	native substr(from, to)
	native length()

	fun join(iterable)
		var lst = iterable
		if !(lst is List) then
			lst = []
			for var e in iterable do
				lst.add(e)
			end
		end
		return this.__join(lst)
	end

	native __join(lst)

	fun __string__()
		return this
	end

	fun __iterator__()
		return __StringIterator(this)
	end

	native __hash__()
end

class __StringIterator
	fun new(str)
		this.str = str
		this.pos = 0
	end

	fun hasNext()
		return this.pos < this.str.length()
	end

	fun next()
		var c = this.str[this.pos]
		this.pos += 1
		return c
	end
end

class List
	fun new()
		__noinstance(this)
	end

	native add(e)
	native insert(i, e)
	native removeAt(i)
	native size()
	native clear()
	native subList(from, to)

	fun addAll(iterable)
		var changed = false
		for var e in iterable do
			this.add(e)
			changed = true
		end
		return changed
	end

	fun insertAll(iterable, i=0)
		if i < 0 or i >= this.size() then
			raise IndexOutOfBoundException(str(i))
		end

		var changed = false
		for var e in iterable do
			this.insert(i, e)
			changed = true
		end
		return changed
	end

	fun remove(e)
		for var i = 0; i < this.size(); i += 1 do
			if e == this[i] then
				this.removeAt(i)
				return true
			end
		end
		return false
	end

	fun removeAll(iterable)
		var changed = false
		for var e in iterable do
			var r = this.remove(e)
			changed = changed or r
		end
		return changed
	end

	fun contains(e)
		return this.indexOf(e) != -1
	end

	fun indexOf(e)
		for var i = 0; i < this.size(); i += 1 do
			if this[i] == e then
				return i
			end
		end
		return -1
	end

	fun indexOfLast(e)
		for var i = this.size() - 1; i >= 0; i -= 1 do
			if this[i] == e then
				return i
			end
		end
		return -1
	end

	fun empty()
		return this.size() == 0
	end

	fun __iterator__()
		return __SequenceIterator(this)
	end

	fun __string__()
		var s = "["
		var length = this.size()
		
		for var i = 0; i < length; i += 1 do
			s += str(this[i])
			if i < length - 1 then s += ", " end
		end

		return s + "]"
	end

	fun __eq__(lst)
		if !(lst is List) then return false end
		
		if this.size() != lst.size() then
			return false
		end
		for var i in range(this.size()) do
			if this[i] != lst[i] then
				return false
			end
		end
		return true
	end
end

class Tuple
	fun new()
		__noinstance(this)
	end

	native size()

	fun __string__()
		var s = "("
		var size = this.size()

		for var i = 0; i < size; i += 1 do
			s += str(this[i])
			if(i != size - 1) then s += ", " end
		end

		return s + ")"
	end

	fun __iterator__()
		return __SequenceIterator(this)
	end
end

class __SequenceIterator
	fun new(seq)
		this.n = 0
		this.seq = seq
	end

	fun hasNext()
		return this.n < this.seq.size()
	end

	fun next()
		var next = this.seq[this.n]
		this.n += 1
		return next
	end

	fun __iterator__()
		return this
	end
end

class __SeqReverseIterator
	fun new(seq)
		this.n = seq.size() - 1
		this.seq = seq
	end

	fun hasNext()
		return this.n >= 0
	end

	fun next()
		var prev = this.seq[this.n]
		this.n -= 1
		return prev
	end

	fun __iterator__()
		return this
	end
end

fun reversed(seq)
	return __SeqReverseIterator(seq)
end

fun __noinstance(inst)
	raise Exception("Class " + inst.__class__().getName() + " cannot be directly instantiated")
end

// Exceptions builtin classes

class Exception
	fun new(err=null)
		this.err = err
	end
end

class TypeException : Exception end
class NameException : Exception end
class FieldException : Exception end
class MethodException : Exception end
class ImportException : Exception end
class StackOverflowException : Exception end
class DivisionByZeroException : Exception end
class InvalidArgException : Exception end
class IndexOutOfBoundException : Exception end
class AssertException : Exception end
class IOException : Exception end

fun assert(cond, msg="assertion failed")
	if !cond then 
		raise AssertException(msg) 
	end
end

fun print(o="", file=null)
	write(o, file)
	__printstr("\n", file)
end

fun write(o, file=null)
	var s = str(o)
	assert(s is String, "__string__() didn't return a string, got " + s.__class__().getName())
	__printstr(s, file)
end

fun str(e)
	return e.__string__()
end

class range
	fun new(from, to=null, step=1)
		if to == null then
			to = from
			from = 0
		end

		if !isInt(from) or !isInt(to) then
			raise InvalidArgException("Argument `from` and `to` must be integers")
		end

		this.from = from
		this.to = to
		this.count = from
		this.step = step
	end

	fun hasNext()
		return this.count < this.to if this.step > 0 else this.count >= this.to
	end

	fun next()
		var i = this.count
		this.count += this.step
		return i
	end

	fun __iterator__()
		return this
	end

	fun __string__()
		var s = "["
		for var i = this.from; i < this.to; i += 1 do
			s += i.__string__()
			if i != this.to - 1 then
				s += ", "
			end
		end
		return s + "]"
	end
end

native int(n)
native num(n)
native char(num)
native ascii(char)
native isInt(n)
native list(size=0, init=null)

native __printstr(str, file=null)
