class Number
    native __string__()
    native __class__()
    native __hash__()
end
class Boolean
    native __string__()
    native __class__()
end
class Null
    native __string__()
    native __class__()
end
class Function
    native __string__()
end
class Module
    native __string__()
end
class StackTrace end

class String
    fun join(iterable)
        var seq = iterable
        if !(seq is List or seq is Tuple) then
            seq = []
            for var e in iterable do
                lseq.add(e)
            end
        end
        return this.__join(seq)
    end

    native substr(from, to)
    native __join(seq)

    native __eq__(o)
    native __len__()
    native __iter__(iter)
    native __next__(idx)
    native __string__()
    native __hash__()
end

class List
    native add(e)
    native insert(i, e)
    native removeAt(i)
    native subList(from, to)
    native clear()
    native __len__()
    native __iter__(iter)
    native __next__(idx)

    fun addAll(iterable)
        var changed = false
        for var e in iterable do
            this.add(e)
            changed = true
        end
        return changed
    end

    fun insertAll(iterable, i=0)
        if i < 0 or i >= #this then
            raise IndexOutOfBoundException(str(i))
        end

        var changed = false
        for var e in iterable do
            this.insert(i, e)
            changed = true
        end
        return changed
    end

    fun remove(e)
        for var i = 0; i < #this; i += 1 do
            if e == this[i] then
                this.removeAt(i)
                return true
            end
        end
        return false
    end

    fun removeAll(iterable)
        var changed = false
        for var e in iterable do
            var r = this.remove(e)
            changed = changed or r
        end
        return changed
    end

    fun contains(e)
        return this.indexOf(e) != -1
    end

    fun indexOf(e)
        for var i = 0; i < #this; i += 1 do
            if this[i] == e then
                return i
            end
        end
        return -1
    end

    fun indexOfLast(e)
        for var i = #this - 1; i >= 0; i -= 1 do
            if this[i] == e then
                return i
            end
        end
        return -1
    end

    fun empty()
        return #this == 0
    end

    fun sort(comp=null)
        var size = #this - 1
        var temp = List(#this, fun(i) return this[i] end)
        for var m = 1; m <= size; m *= 2 do
            for var i = 0; i < size; i += 2 * m do
                var from, mid, to = i, i + m - 1, i + 2 * m - 1
                if to > size then to = size end
                this.__merge(temp, from, mid, to, comp)
            end
        end
    end

    fun __merge(temp, l, m, r, comp)
        var k, i, j = l, l, m + 1

        while i <= m and j <= r do
            if comp(this[i], this[j]) <= 0 if comp else this[i] <= this[j] then
                temp[k] = this[i]
                i += 1
            else
                temp[k] = this[j]
                j += 1
            end
            k += 1
        end
        
        var size = #this
        while i < size and i <= m do
            temp[k] = this[i]
            i += 1; k += 1
        end

        for var i = l; i <= r; i += 1 do
            this[i] = temp[i]
        end
    end

    fun foreach(pred)
        for var e in this do pred(e) end
    end

    fun __string__()
        var s = "["
        var length = #this

        for var i = 0; i < length; i += 1 do
            s += ##this[i]
            if i < length - 1 then s += ", " end
        end

        return s + "]"
    end

    fun __eq__(lst)
        if !(lst is List) then return false end

        var length = #this
        if length != #lst then
            return false
        end

        for var i = 0; i < length; i += 1 do
            if this[i] != lst[i] then
                return false
            end
        end
        return true
    end
end

class Tuple
    native sub(from, to)
    native __len__()
    native __iter__(iter)
    native __next__(idx)

    fun __string__()
        var s = "("
        var size = #this

        for var i = 0; i < size; i += 1 do
            s += ##this[i]
            if(i != size - 1) then s += ", " end
        end

        return s + ")"
    end

    fun __eq__(tup)
        if !(tup is Tuple) then return false end

        var length = #this
        if length != #tup then
            return false
        end
        for var i = 0; i < length; i += 1 do
            if this[i] != tup[i] then
                return false
            end
        end
        return true
    end

end

// Exceptions builtin classes

class Exception
    fun new(err=null)
        this.err = err
    end
end

class TypeException : Exception end
class NameException : Exception end
class FieldException : Exception end
class MethodException : Exception end
class ImportException : Exception end
class StackOverflowException : Exception end
class DivisionByZeroException : Exception end
class InvalidArgException : Exception end
class IndexOutOfBoundException : Exception end
class AssertException : Exception end
class IOException : Exception end

fun assert(cond, msg="assertion failed")
    if !cond then 
        raise AssertException(msg) 
    end
end

fun print(s, ...)
    __printstr(##s)
    for var s in args do
        __printstr(" ")
        __printstr(##s)
    end
    __printstr("\n")
end

fun type(o)
    return o.__class__()
end

native ascii(char)
native char(num)
native eval(source)
native int(n)
native isInt(n)
native num(n)

native __printstr(str)
