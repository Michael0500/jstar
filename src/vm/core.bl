class Number {
	def new() { error("Class Number cannot be instantiated."); }
	native __string__();
	native __class__();
	native __hash__();
}
class Boolean {
	def new() { error("Class Boolean cannot be instantiated."); }
	native __string__();
	native __class__();
}
class Null {
	def new() { error("Class Null cannot be instantiated."); }
	native __string__();
	native __class__();
}
class Function {
	def new() { error("Class Function cannot be instantiated."); }
	native __string__();
}
class Module   {
	def new() { error("Class Module cannot be instantiated."); }
	native __string__();
}

class String {
	def new() { error("Class String cannot be instantiated."); }

	native substr(from, to);
	native length();

	def format(args) {
		var s = "";         // string being built
		var lastformat = 0; // index of 1 past the end of last format symbol
		var formatn = 0;    // keeps track of the format symbols encountered
		for(var i = 0; i < this.length(); i = i + 1) {
			if(this[i] == "\\") {
				i = i + 1; // skip escaped char
			} else if(this[i] == "{") {
				var endformat = i;
				while(this[endformat] != "}") {
					endformat = endformat + 1;
					if(endformat >= this.length()) {
						error("Unterminated format.");
					}
				}

				var argn = formatn;
				if(endformat - i > 1) {
					argn = int(this.substr(i + 1, endformat));
				}

				s = s + this.substr(lastformat, i);
				s = s + args[argn].__string__();

				lastformat = endformat + 1;
				formatn = formatn + 1;
			}
		}
		if(lastformat < this.length()) {
			s = s + this.substr(lastformat, this.length());
		}
		return s;
	}

	def __string__() {
		return this;
	}

	native __hash__();
}

class List {
	def new() { error("Class List cannot be instantiated."); }

	native add(e);
	native insert(i, e);
	native removeAt(i);
	native size();
	native clear();

	def addAll(iterable) {
		var changed = false;
		for(var e in iterable) {
			this.add(e);
			changed = true;
		}
		return changed;
	}

	def insertAll(i, iterable) {
		if(i < 0 or i >= this.size()) {
			error("List index out of bounds: " + str(i));
		}

		var changed = false;
		for(var e in iterable) {
			this.insert(i, e);
			changed = true;
		}
		return changed;
	}

	def remove(e) {
		var i = this.indexOf(e);
		if(i >= 0) {
			this.remove(i);
			return true;
		}
		return false;
	}

	def removeAll(iterable) {
		var changed = false;
		for(var e in iterable) {
			var r = this.remove(e);
			changed = changed or r;
		}
		return changed;
	}

	def contains(e) {
		return this.indexOf(e) != -1;
	}

	def indexOf(e) {
		for(var i = 0; i < this.size(); i = i + 1) {
			if(this[i].__equals__(e)) {
				return i;
			}
		}
		return -1;
	}

	def indexOfLast(e) {
		for(var i = this.size() - 1; i >= 0; i = i - 1) {
			if(this[i].__equals__(e)) {
				return i;
			}
		}
		return -1;
	}

	def join(sep) {
		var s = "";
		for(var i = 0; i < this.size(); i = i + 1) {
			s = s + this[i].__string__();
			if(i != this.size() - 1) s = s + sep;
		}
		return s;
	}

	def subList(from, to) {
		if(to < from) {
			error("to arg should be >= from arg");
		}

		var sub = [];
		for(var i = from; i < to; i = i + 1) {
			sub.add(this[i]);
		}
		return sub;
	}

	def empty() {
		return this.size() == 0;
	}

	def __iterator__() {
		return __ListIterator(this);
	}

	def __string__() {
		return "[" + this.join(", ") + "]";
	}
}

class __ListIterator {
	def new(list) {
		this.n = 0;
		this.list = list;
	}

	def hasNext() {
		return this.n < this.list.size();
	}

	def next() {
		var next = this.list[this.n];
		this.n = this.n + 1;
		return next;
	}
}

class __ListReverseIterator {
	def new(list) {
		this.n = list.size() - 1;
		this.list = list;
	}

	def hasNext() {
		return this.n >= 0;
	}

	def next() {
		var prev = this.list[this.n];
		this.n = this.n - 1;
		return prev;
	}

	def __iterator__() {
		return this;
	}
}

def reversed(lst) {
	typeassert(lst, List, "Argument 1");
	return __ListReverseIterator(lst);
}

def print(o) {
	var s = o.__string__();
	if(!(s is String)) {
		error("__string__() didn't return a string: type " + s.__class__().getName());
	}
	__printstr(o.__string__());
}

def printf(fmt, args) {
	__printstr(fmt.format(args));
}

def str(e) {
	return e.__string__();
}

native int(n);
native num(n);
native typeassert(o, cls, msg);
native typeassertInt(o, msg);
native range(from, to);
native list(n, init);
native error(msg);
native isInt(n);
native __printstr(str);
