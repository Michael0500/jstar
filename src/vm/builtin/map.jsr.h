// WARNING: this is a file generated automatically by the build process from
// "/home/fabrizio/Workspace/c/blang/src/vm/builtin/map.jsr". Do not modify.
const char *map_jsr =
"class __Entry\n"
"    fun new(k, v)\n"
"        this.key, this.value = k, v\n"
"        this.next = null\n"
"    end\n"
"    fun __string__()\n"
"        return \"{\" + ##this.key + \":\" + ##this.value + \"}\"\n"
"    end\n"
"end\n"
"class Map\n"
"    fun new(...)\n"
"        this._count, this._size = 0, 16\n"
"        this._entries = List(16)\n"
"        if #args != 0 then\n"
"            for var k, v in args do\n"
"                this[k] = v\n"
"            end\n"
"        end\n"
"    end\n"
"    native __getEntry(key)\n"
"    native __addEntry(e)\n"
"    native __grow()\n"
"    fun __get__(key)\n"
"        var e = this.__getEntry(key)\n"
"        return e.value if e != null else null\n"
"    end\n"
"    fun __set__(key, val)\n"
"        var e = this.__getEntry(key)\n"
"        if e != null then\n"
"            var old = e.value\n"
"            e.value = val\n"
"            return old\n"
"        end\n"
"        // The max load factor is 0.75\n"
"        if this._count + 1 > this._size * 0.75 then\n"
"            this.__grow()\n"
"        end\n"
"        this.__addEntry(__Entry(key, val))\n"
"        this._count += 1\n"
"        return null\n"
"    end\n"
"    fun remove(key)\n"
"        var i = key.__hash__() % this._size\n"
"        var prev\n"
"        var head = this._entries[i]\n"
"        while head != null do\n"
"            if key == head.key then\n"
"                if prev == null then\n"
"                    this._entries[i] = head.next\n"
"                else\n"
"                    prev.next = head.next\n"
"                end\n"
"                this._count -= 1\n"
"                return head.value\n"
"            end\n"
"            prev = head\n"
"            head = head.next\n"
"        end\n"
"        return null\n"
"    end\n"
"    fun containsKey(key)\n"
"        return this.__getEntry(key) != null\n"
"    end\n"
"    fun containsValue(val)\n"
"        for var e in this.valueIterator() do\n"
"            if e == val then\n"
"                return true\n"
"            end\n"
"        end\n"
"        return false\n"
"    end\n"
"    fun clear()\n"
"        for var i = 0; i < this._size; i += 1 do\n"
"            this._entries[i] = null\n"
"        end\n"
"        this._count = 0\n"
"    end\n"
"    fun __len__()\n"
"        return this._count\n"
"    end\n"
"    fun keySet()\n"
"        return __KeySet(this)\n"
"    end\n"
"    fun keyIterator()\n"
"        return __KeyIterator(this)\n"
"    end\n"
"    fun valueIterator()\n"
"        return __ValueIterator(this)\n"
"    end\n"
"    fun keyValIterator()\n"
"        return __KeyValueIterator(this)\n"
"    end\n"
"    fun __string__()\n"
"        var entries = []\n"
"        for var e in __EntryIterator(this) do\n"
"            entries.add(##e)\n"
"        end\n"
"        return \"[\" + \", \".join(entries) + \"]\"\n"
"    end\n"
"end\n"
"fun tomap(iterable)\n"
"    var m = Map()\n"
"    for var k, v in iterable do\n"
"        m[k] = v\n"
"    end\n"
"    return m\n"
"end\n"
"import set\n"
"class __KeySet : set.Set\n"
"    fun new(map)\n"
"        this._map = map\n"
"    end\n"
"    fun contains(e)\n"
"        return this._map.__getEntry(e) != null\n"
"    end\n"
"    fun addAll(iterable)\n"
"        raise Exception(\"addAll not supported in KeySet\")\n"
"    end\n"
"    fun add(e)\n"
"        raise Exception(\"add not supported in KeySet.\")\n"
"    end\n"
"    fun remove(e)\n"
"        raise Exception(\"remove not supported in KeySet.\")\n"
"    end\n"
"    fun removeAll(iterable)\n"
"        raise Exception(\"removeAll not supported in KeySet\")\n"
"    end\n"
"    fun clear()\n"
"        raise Exception(\"clear not supported in KeySet\")\n"
"    end\n"
"end\n"
"class __EntryIterator\n"
"    fun new(map)\n"
"        this.map = map\n"
"        this.index = 0\n"
"        this.next = null\n"
"        this.e = null\n"
"        this.__nextBucket()\n"
"    end\n"
"    fun __nextBucket()\n"
"        if this.index >= this.map._size then\n"
"            return\n"
"        end\n"
"        while this.index < this.map._size - 1 and this.map._entries[this.index] == null do\n"
"            this.index += 1\n"
"        end\n"
"        this.next = this.map._entries[this.index]\n"
"    end\n"
"    fun __iter__(_)\n"
"        return this.next != null\n"
"    end\n"
"    fun __next__(_)\n"
"        var e = this.next\n"
"        this.next = e.next\n"
"        if this.next == null then\n"
"            this.index += 1\n"
"            this.__nextBucket()\n"
"        end\n"
"        return e\n"
"    end\n"
"end\n"
"class __KeyIterator : __EntryIterator\n"
"    fun __next__(_)\n"
"        return super.__next__(_).key\n"
"    end\n"
"end\n"
"class __ValueIterator : __EntryIterator\n"
"    fun __next__(_)\n"
"        return super.__next__(_).value\n"
"    end\n"
"end\n"
"class __KeyValueIterator : __EntryIterator\n"
"    fun __next__(_)\n"
"        var e = super.__next__(_)\n"
"        return e.key, e.value\n"
"    end\n"
"end\n"
;