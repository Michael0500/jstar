// WARNING: this is a file generated automatically by the build process from
// "/home/fabrizio/Workspace/c/blang/src/vm/builtin/set.jsr". Do not modify.
const char *set_jsr =
"class Set\n"
"    fun new(...)\n"
"        import map\n"
"        this._map = map.Map()\n"
"        if #args != 0 then\n"
"            for var e in args do\n"
"                this.add(e)\n"
"            end\n"
"        end\n"
"    end\n"
"    fun add(e)\n"
"        if !this.contains(e) then\n"
"            this._map[e] = 0\n"
"            return true\n"
"        end\n"
"        return false\n"
"    end\n"
"    fun addAll(iterable)\n"
"        var changed = false\n"
"        for var e in iterable do\n"
"            var r = this.add(e)\n"
"            changed = changed or r\n"
"        end\n"
"        return changed\n"
"    end\n"
"    fun remove(e)\n"
"        return this._map.remove(e) != null\n"
"    end\n"
"    fun removeAll(iterable)\n"
"        var changed = false\n"
"        for var e in iterable do\n"
"            changed = changed or this.remove(e)\n"
"        end\n"
"        return changed\n"
"    end\n"
"    fun contains(e)\n"
"        return this._map[e] != null\n"
"    end\n"
"    fun containsAll(iterable)\n"
"        for var e in iterable do\n"
"            if !this.contains(e) then\n"
"                return false\n"
"            end\n"
"        end\n"
"        return true\n"
"    end\n"
"    fun clear()\n"
"        this._map.clear()\n"
"    end\n"
"    fun __len__()\n"
"        return #this._map\n"
"    end\n"
"    fun empty()\n"
"        return #this == 0\n"
"    end\n"
"    fun intersect(c)\n"
"        for var e in this do\n"
"            if !c.contains(e) then\n"
"                this.remove(e)\n"
"            end\n"
"        end\n"
"    end\n"
"    fun __iter__(i)\n"
"        if i == null then\n"
"            i = this._map.keyIterator()\n"
"        end\n"
"        return i if i.__iter__(i) else null\n"
"    end\n"
"    fun __next__(i)\n"
"        return i.__next__(i)\n"
"    end\n"
"    fun __string__()\n"
"        var elems = []\n"
"        for var e in this do\n"
"            elems.add(##e)\n"
"        end\n"
"        return \"{\" + \", \".join(elems) + \"}\"\n"
"    end\n"
"end\n"
"fun toset(iterable)\n"
"    var s = Set()\n"
"    for var e in iterable do\n"
"        s.add(e)\n"
"    end\n"
"    return s\n"
"end\n"
;