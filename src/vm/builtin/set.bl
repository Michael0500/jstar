class Set
    fun new(...)
        import map
        this._map = map.Map()

        if #args != 0 then
            for var e in args do
                this.add(e)
            end
        end
    end

    fun add(e)
        if !this.contains(e) then
            this._map[e] = 0
            return true
        end
        return false
    end

    fun addAll(iterable)
        var changed = false
        for var e in iterable do
            var r = this.add(e)
            changed = changed or r
        end
        return changed
    end

    fun remove(e)
        return this._map.remove(e) != null
    end

    fun removeAll(iterable)
        var changed = false
        for var e in iterable do
            changed = changed or this.remove(e)
        end
        return changed
    end

    fun contains(e)
        return this._map[e] != null
    end

    fun containsAll(iterable)
        for var e in iterable do
            if !this.contains(e) then
                return false
            end
        end
        return true
    end

    fun clear()
        this._map.clear()
    end

    fun __len__()
        return #this._map
    end

    fun empty()
        return #this == 0
    end

    fun intersect(c)
        for var e in this do
            if !c.contains(e) then
                this.remove(e)
            end
        end
    end

    fun __iter__(i)
        if i == null then
            i = this._map.keyIterator()
        end
        return i if i.__iter__(i) else null
    end

    fun __next__(i)
        return i.__next__(i)
    end

    fun __string__()
        var elems = []
        for var e in this do
            elems.add(##e)
        end
        return "{" + ", ".join(elems) + "}"
    end
end

fun toset(iterable)
    var s = Set()
    for var e in iterable do
        s.add(e)
    end
    return s
end
