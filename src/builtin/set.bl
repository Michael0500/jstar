class HashSet
	fun new()
		import map
		this._map = map.HashMap()
	end

	fun add(e)
		if !this.contains(e) then
			this._map[e] = 0
			return true
		end
		return false
	end

	fun addAll(iterable)
		var changed = false
		for var e in iterable do
			var r = this.add(e)
			changed = changed or r
		end
		return changed
	end

	fun remove(e)
		return this._map.remove(e) != null
	end

	fun removeAll(iterable)
		var changed = false
		for var e in iterable do
			var r = this.remove(e)
			changed = changed or r
		end
		return changed
	end

	fun contains(e)
		return this._map[e] != null
	end

	fun containsAll(iterable)
		var ret = true
		for var e in iterable do
			var r = this.contains(e)
			ret = ret and r
		end
		return ret
	end

	fun clear()
		this._map.clear()
	end

	fun size()
		return this._map.size()
	end

	fun empty()
		return this.size() == 0
	end

	fun intersect(c)
		for var e in this do
			if !c.contains(e) then
				this.remove(e)
			end
		end
	end

	fun __iterator__()
		import map
		return map.__KeyIterator(this._map)
	end

	fun __string__()
		var s = "{"
		var count = 0

		for var k in this do
			count += 1
			s += str(k)
			if count < this._map.size() then s += ", " end
		end

		return s + "}"
	end
end
