class Number
    native new(n)
    native isInt()
    native __string__()
    native __hash__()
end

class Boolean
    native new(b)
    native __string__()
    native __hash__()
end

class Null
    native __string__()
end

class Function
    native __string__()
end

class Module
    native __string__()
end

class StackTrace end
class Userdata end

class Iter
    fun forEach(func)
        for var e in this do func(e) end
    end

    fun enumerate() 
        return IEnumerate(this)
    end

    fun map(func)
        return IMap(func, this)
    end

    fun filter(func) 
        return IFilter(func, this)
    end

    fun zip(iterable)
        return IZip(this, iterable)
    end
end

class Sequence is Iter
    fun new()
        raise NotImplementedException()
    end

    fun contains(e)
        return this.indexOf(e) != -1
    end

    fun indexOf(e)
        var length = #this
        for var i = 0; i < length; i += 1 do
            if this[i] == e then
                return i
            end
        end
        return -1
    end

    fun indexOfLast(e)
        for var i = #this - 1; i >= 0; i -= 1 do
            if this[i] == e then
                return i
            end
        end
        return -1
    end

    fun count(e)
        var count = 0
        for var o in this do
            if o == e then 
                count += 1
            end
        end
        return count
    end

    fun slice(from, to=null)
        if !to then to = #this end
        var res = []
        for var i = from; i < to; i += 1 do
            res.add(this[i])
        end
        return res
    end

    fun empty()
        return #this == 0
    end

    fun reverse()
        return IReverse(this)
    end

    fun __eq__(o)
        if type(o) != type(this) then
            return false 
        end

        var length = #this

        if length != #o then
            return false
        end

        for var i = 0; i < length; i += 1 do
            if this[i] != o[i] then
                return false
            end
        end

        return true
    end
end

class String is Sequence
    native new(...)
    native slice(from, to=null)
    native charAt(idx)
    native startsWith(prefix, offset=0)
    native endsWith(suffix)
    native strip()
    native chomp()
    native join(iterable)
    native __eq__(o)
    native __len__()
    native __iter__(iter)
    native __next__(idx)
    native __string__()
    native __hash__()
end

class List is Sequence
    native new(n=0, init=null)
    native add(e)
    native insert(i, e)
    native removeAt(i)
    native slice(from, to=null)
    native clear()
    native __len__()
    native __iter__(iter)
    native __next__(idx)

    fun addAll(iterable)
        var changed = false
        for var e in iterable do
            this.add(e)
            changed = true
        end
        return changed
    end

    fun insertAll(iterable, i=0)
        var changed = false
        for var e in iterable do
            this.insert(i, e)
            changed = true
        end
        return changed
    end

    fun remove(e)
        var length = #this
        for var i = 0; i < length; i += 1 do
            if e == this[i] then
                this.removeAt(i)
                return true
            end
        end
        return false
    end

    fun removeAll(iterable)
        var changed = false
        for var e in iterable do
            var r = this.remove(e)
            changed = changed or r
        end
        return changed
    end

    fun pop()
        return this.removeAt(#this - 1)
    end

    fun sort(comp=null)
        var temp = this.slice(0)
        var size = #this - 1
        for var m = 1; m <= size; m *= 2 do
            for var i = 0; i < size; i += 2 * m do
                var from, mid, to = i, i + m - 1, i + 2 * m - 1
                if to > size then to = size end
                this._merge(from, mid, to, comp, temp)
            end
        end
    end

    fun _merge(l, m, r, comp, temp)
        var k, i, j = l, l, m + 1

        while i <= m and j <= r do
            if comp(this[i], this[j]) <= 0 if comp else this[i] <= this[j] then
                temp[k] = this[i]
                i += 1
            else
                temp[k] = this[j]
                j += 1
            end
            k += 1
        end
        
        var size = #this
        while i < size and i <= m do
            temp[k] = this[i]
            i += 1; k += 1
        end

        for var i = l; i <= r; i += 1 do
            this[i] = temp[i]
        end
    end

    fun __string__()
        return "[" + ", ".join(this) + "]"
    end
end

class Tuple is Sequence
    native new(seq)
    native slice(from, to=null)
    native __len__()
    native __iter__(iter)
    native __next__(idx)
    native __hash__()

    fun __string__()
        return "(" + ", ".join(this) + ")"
    end
end

class Table
    native delete(key)
    native clear()
    native contains(key)
    native keys()
    native values()
    native __get__(key)
    native __set__(key, val)
    native __len__()
    native __iter__(i)
    native __next__(i)
    native __string__()
end

class Enum
    native new(...)
    native value(name)
    native name(value)
end

fun assert(cond, msg="assertion failed")
    if !cond then raise AssertException(msg) end
end

fun sorted(iterable, comp=null)
    var lst = toList(iterable)
    lst.sort(comp)
    return lst
end

fun reduce(iterable, fn)
    var acc, iter = null, iterable.__iter__(null)
    if !iter then return null end

    acc = iterable.__next__(iter) 
    while iter = iterable.__iter__(iter) do
        acc = fn(acc, iterable.__next__(iter))
    end

    return acc
end

fun any(iterable, func)
    for var e in iterable do
        if func(e) then
            return true
        end
    end
    return false
end

fun all(iterable, func)
    for var e in iterable do
        if !func(e) then
            return false
        end
    end
    return true
end

fun toList(iterable)
    if iterable is Sequence then
        var len = #iterable
        var list = List(len)
        for var i = 0; i < len; i += 1 do
            list[i] = iterable[i]
        end
        return list
    end

    var list = []
    for var e in iterable do
        list.add(e)
    end
    return list
end

fun toTable(iterable)
    var table = {}
    if iterable is Table then
        for var k in iterable do
            table[k] = iterable[k]
        end
    else
        for var k, v in iterable do
            table[k] = v
        end
    end
    return table
end

native ascii(num)
native char(c)
native eval(source)
native exec(cmd)
native int(n)
native system(cmd)
native print(s, ...)
native type(o)

class IReverse is Sequence
    fun new(sequence)
        this._sequence = sequence
        this._size = #sequence
    end

    fun __get__(i)
        try
            return this._sequence[this._size - i - 1]
        except IndexOutOfBoundException e
            raise IndexOutOfBoundException(##i)
        end
    end

    fun __len__()
        return this._size
    end

    fun __iter__(i)
        if i == null then return 0 if this._size > 0 else false end
        return i + 1 if i < this._size - 1 else false
    end

    fun __next__(i)
        return this._sequence[this._size - i - 1]
    end
end

class IEnumerate is Iter
    fun new(iter, start=0)
        this._iter = iter
        this._idx = start
    end

    fun __iter__(i)
        return this._iter.__iter__(i)
    end

    fun __next__(i)
        var ret = this._idx, this._iter.__next__(i)
        this._idx += 1
        return ret
    end
end

class IFilter is Iter
    fun new(func, iter)
        this._func = func
        this._iter = iter
    end

    fun __iter__(i)
        var iter = i
        while iter = this._iter.__iter__(iter) do
            if this._func(this._iter.__next__(iter)) then
                return iter
            end
        end
        return false
    end

    fun __next__(i)
        return this._iter.__next__(i)
    end
end

class IMap is Iter
    fun new(func, iter)
        this._func = func
        this._iter = iter
    end

    fun __iter__(i)
        return this._iter.__iter__(i)
    end

    fun __next__(i)
        return this._func(this._iter.__next__(i))
    end
end

class IZip is Iter
    fun new(...)
        if #args == 0 then raise InvalidArgException("Expected at least one iterator") end
        this._iters = args
        this._result = []
    end

    fun __iter__(tup)
        var i = 0
        for var iterator in this._iters do
            var res = iterator.__iter__(tup[i] if tup else null)
            if !res then return false end
            this._result.add(res)
            i += 1
        end
        var res = Tuple(this._result)
        this._result.clear()
        return res
    end

    fun __next__(tup)
        var i = 0
        for var iterator in this._iters do
            this._result.add(iterator.__next__(tup[i]))
            i += 1
        end
        var res = Tuple(this._result)
        this._result.clear()
        return res
    end
end

class Exception
    fun new(err="")
        this._err = err
        this._stacktrace = null
    end

    fun err()
        return this._err
    end

    native printStacktrace()
end

class TypeException is Exception end
class NameException is Exception end
class FieldException is Exception end
class MethodException is Exception end
class ImportException is Exception end
class StackOverflowException is Exception end
class SyntaxException is Exception end
class InvalidArgException is Exception end
class IndexOutOfBoundException is Exception end
class AssertException is Exception end
class NotImplementedException is Exception end