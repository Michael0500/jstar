//--------- Built-in classes ---------

class Number
    native new(n)
    native isInt()
    native __string__()
    native __hash__()
end

class Boolean
    native new(b)
    native __string__()
end

class Null
    native __string__()
end

class Function
    native __string__()
end

class Module
    native __string__()
end

class StackTrace end

class String
    native new(...)
    native substr(from, to)
    native startsWith(prefix, offset=0)
    native endsWith(suffix)
    native strip()
    native chomp()
    native join(iterable)
    native __eq__(o)
    native __len__()
    native __iter__(iter)
    native __next__(idx)
    native __string__()
    native __hash__()
end

class Sequence
    fun new()
        raise NotImplementedException('Sequence is an abstract class')
    end

    fun contains(e)
        return this.indexOf(e) != -1
    end

    fun indexOf(e)
        var lenth = #this
        for var i = 0; i < length; i += 1 do
            if this[i] == e then
                return i
            end
        end
        return -1
    end

    fun indexOfLast(e)
        for var i = #this - 1; i >= 0; i -= 1 do
            if this[i] == e then
                return i
            end
        end
        return -1
    end

    fun empty()
        return #this == 0
    end

    fun forEach(pred)
        for var e in this do pred(e) end
    end

    fun __eq__(o)
        if type(o) != type(this) then
            return false 
        end

        var length = #this
        if length != #o then
            return false
        end

        for var i = 0; i < length; i += 1 do
            if this[i] != o[i] then
                return false
            end
        end
        return true
    end

    fun __hash__()
        var hashCode = 1
        for var e in this do
            hashCode = (31 * hashCode + (e.__hash__() if e else 0)) % 0xffffffff
        end
        return hashCode
    end
end

class List : Sequence
    native new(n=0, init=null)
    native add(e)
    native insert(i, e)
    native removeAt(i)
    native subList(from, to)
    native clear()
    native __len__()
    native __iter__(iter)
    native __next__(idx)

    fun addAll(iterable)
        var changed = false
        for var e in iterable do
            this.add(e)
            changed = true
        end
        return changed
    end

    fun insertAll(iterable, i=0)
        var changed = false
        for var e in iterable do
            this.insert(i, e)
            changed = true
        end
        return changed
    end

    fun remove(e)
        var length = #this
        for var i = 0; i < length; i += 1 do
            if e == this[i] then
                this.removeAt(i)
                return true
            end
        end
        return false
    end

    fun removeAll(iterable)
        var changed = false
        for var e in iterable do
            var r = this.remove(e)
            changed = changed or r
        end
        return changed
    end

    fun pop()
        return this.removeAt(#this - 1)
    end

    fun sort(comp=null)
        var temp = List(#this, fun(i) return this[i] end)

        fun merge(l, m, r)
            var k, i, j = l, l, m + 1

            while i <= m and j <= r do
                if comp(this[i], this[j]) <= 0 if comp else this[i] <= this[j] then
                    temp[k] = this[i]
                    i += 1
                else
                    temp[k] = this[j]
                    j += 1
                end
                k += 1
            end
            
            var size = #this
            while i < size and i <= m do
                temp[k] = this[i]
                i += 1; k += 1
            end

            for var i = l; i <= r; i += 1 do
                this[i] = temp[i]
            end
        end
        
        var size = #this - 1
        for var m = 1; m <= size; m *= 2 do
            for var i = 0; i < size; i += 2 * m do
                var from, mid, to = i, i + m - 1, i + 2 * m - 1
                if to > size then to = size end
                merge(from, mid, to)
            end
        end
    end

    fun __string__()
        return "[" + ", ".join(this) + "]"
    end
end

class Tuple : Sequence
    native new(seq)
    native subTuple(from, to)
    native __len__()
    native __iter__(iter)
    native __next__(idx)

    fun __string__()
        return "(" + ", ".join(this) + ")"
    end
end

class Table 
    native delete(key)
    native clear()
    native contains(key)
    native keys()
    native values()
    native __get__(key)
    native __set__(key, val)
    native __len__()
    native __iter__(i)
    native __next__(i)
    native __string__()
end

class Enum
    native new(...)
    native value(name)
    native name(value)
end

//--------- Standard iterators ---------

class Iter
    fun new(indexable)
        this.__indexable = indexable
    end

    fun __iter__(i)
        if i == null then
            return 0
        end
        if i < #this.__indexable - 1 then
            return i + 1
        else 
            return false
        end
    end

    fun __next__(i)
        return this.__indexable[i]
    end
end

class Reverse
    fun new(indexable)
        this.__indexable = indexable
        this.__size = #indexable
    end

    fun __get__(i)
        try
            return this.__indexable[this.__size - i - 1]
        except IndexOutOfBoundException e
            raise IndexOutOfBoundException(##i)
        end
    end

    fun __len__()
        return this.__size
    end

    fun __iter__(i)
        if i == null then
            return 0 if this.__size > 0 else false
        end
        return i + 1 if i < this.__size - 1 else false
    end

    fun __next__(i)
        return this.__indexable[this.__size - i - 1]
    end
end

class Enumerate
    fun new(iter, start=0)
        this.__iter = iter
        this.__idx = start
    end

    fun __iter__(i)
        return this.__iter.__iter__(i)
    end

    fun __next__(i)
        var ret = this.__idx, this.__iter.__next__(i)
        this.__idx += 1
        return ret
    end
end

class Zip
    fun new(...)
        if #args == 0 then 
            raise TypeException("Must provide at least one iterator.") 
        end
        this.__iters = args
        this.__result = []
    end

    fun __iter__(tup)
        if tup == null then
            for var iterator in this.__iters do
                this.__result.add(iterator.__iter__(null))
            end
        else
            var i = 0
            for var iterator in this.__iters do
                var res = iterator.__iter__(tup[i])
                if !res then return false end
                this.__result.add(res)
                i += 1
            end
        end

        var res = Tuple(this.__result)
        this.__result.clear()
        return res
    end

    fun __next__(tup)
        var i, res = 0, []
        for var iterator in this.__iters do
            res.add(iterator.__next__(tup[i]))
            i += 1
        end
        return Tuple(res)
    end
end

//--------- Core functions ---------

fun assert(cond, msg="assertion failed")
    if !cond then raise AssertException(msg) end
end

fun sorted(iterable, comp=null)
    var lst = toList(iterable)
    lst.sort(comp)
    return lst
end

fun switch(cond)
    return fun(jmpTbl)
        if jmpTbl.contains(cond) then
            return jmpTbl[cond](cond)
        else
            return jmpTbl['__dflt__'](cond)
        end
    end
end

fun toList(iterable)
    var size
    try
        size = #iterable
    except MethodException e
    end

    var lst
    if size then
        lst = List(size)
        var i = 0;
        for var e in iterable do
            lst[i] = e
            i += 1
        end
    else
        lst = []
        for var e in iterable do
            lst.add(e)
        end
    end
    return lst
end

native ascii(char)
native char(num)
native eval(source)
native exec(cmd)
native int(n)
native system(cmd)
native print(s, ...)
native type(o)

//--------- Exceptions ---------

class Exception
    fun new(err="")
        this.__err = err
        this.__stacktrace = null
    end

    fun err()
        return this.__err
    end

    native printStacktrace()
end

class TypeException : Exception end
class NameException : Exception end
class FieldException : Exception end
class MethodException : Exception end
class ImportException : Exception end
class StackOverflowException : Exception end
class DivisionByZeroException : Exception end
class InvalidArgException : Exception end
class IndexOutOfBoundException : Exception end
class AssertException : Exception end
class NotImplementedException : Exception end